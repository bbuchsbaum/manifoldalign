// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// linear_sim_embed_cpp
Rcpp::List linear_sim_embed_cpp(const arma::mat& X, const arma::mat& T, const arma::mat& M, double sigma_P, int ncomp, double alpha_p, int maxit, double tol);
RcppExport SEXP _manifoldalign_linear_sim_embed_cpp(SEXP XSEXP, SEXP TSEXP, SEXP MSEXP, SEXP sigma_PSEXP, SEXP ncompSEXP, SEXP alpha_pSEXP, SEXP maxitSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type T(TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< double >::type sigma_P(sigma_PSEXP);
    Rcpp::traits::input_parameter< int >::type ncomp(ncompSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_p(alpha_pSEXP);
    Rcpp::traits::input_parameter< int >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_sim_embed_cpp(X, T, M, sigma_P, ncomp, alpha_p, maxit, tol));
    return rcpp_result_gen;
END_RCPP
}
// compute_edge_distances_cpp
arma::mat compute_edge_distances_cpp(const arma::mat& X, const arma::sp_mat& A);
RcppExport SEXP _manifoldalign_compute_edge_distances_cpp(SEXP XSEXP, SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(compute_edge_distances_cpp(X, A));
    return rcpp_result_gen;
END_RCPP
}
// compute_edge_gradient_cpp
arma::mat compute_edge_gradient_cpp(const arma::mat& S, const arma::sp_mat& A1, const arma::sp_mat& A2, const arma::mat& X1, const arma::mat& X2);
RcppExport SEXP _manifoldalign_compute_edge_gradient_cpp(SEXP SSEXP, SEXP A1SEXP, SEXP A2SEXP, SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A1(A1SEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type A2(A2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_edge_gradient_cpp(S, A1, A2, X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// compute_neighborhood_gradient_cpp
arma::mat compute_neighborhood_gradient_cpp(const arma::mat& S_prev, const arma::mat& W1, const arma::mat& W2, double eps);
RcppExport SEXP _manifoldalign_compute_neighborhood_gradient_cpp(SEXP S_prevSEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_prev(S_prevSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_neighborhood_gradient_cpp(S_prev, W1, W2, eps));
    return rcpp_result_gen;
END_RCPP
}
// compute_anchor_gradient_cpp
arma::mat compute_anchor_gradient_cpp(const arma::mat& S_prev, const arma::uvec& anchor_idx1, const arma::uvec& anchor_idx2, const arma::vec& anchor_vals1, const arma::vec& anchor_vals2, double eps);
RcppExport SEXP _manifoldalign_compute_anchor_gradient_cpp(SEXP S_prevSEXP, SEXP anchor_idx1SEXP, SEXP anchor_idx2SEXP, SEXP anchor_vals1SEXP, SEXP anchor_vals2SEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type S_prev(S_prevSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type anchor_idx1(anchor_idx1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type anchor_idx2(anchor_idx2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type anchor_vals1(anchor_vals1SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type anchor_vals2(anchor_vals2SEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_anchor_gradient_cpp(S_prev, anchor_idx1, anchor_idx2, anchor_vals1, anchor_vals2, eps));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp_cols
arma::vec log_sum_exp_cols(const arma::mat& log_K, const arma::vec& log_u);
RcppExport SEXP _manifoldalign_log_sum_exp_cols(SEXP log_KSEXP, SEXP log_uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_K(log_KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_u(log_uSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp_cols(log_K, log_u));
    return rcpp_result_gen;
END_RCPP
}
// log_sum_exp_rows
arma::vec log_sum_exp_rows(const arma::mat& log_K, const arma::vec& log_v);
RcppExport SEXP _manifoldalign_log_sum_exp_rows(SEXP log_KSEXP, SEXP log_vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type log_K(log_KSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_v(log_vSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum_exp_rows(log_K, log_v));
    return rcpp_result_gen;
END_RCPP
}
// solve_sinkhorn_stabilized_cpp
arma::mat solve_sinkhorn_stabilized_cpp(const arma::mat& C_in, double tau, int max_iter, double tol);
RcppExport SEXP _manifoldalign_solve_sinkhorn_stabilized_cpp(SEXP C_inSEXP, SEXP tauSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type C_in(C_inSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_sinkhorn_stabilized_cpp(C_in, tau, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// normalize_doubly_stochastic_cpp
arma::mat normalize_doubly_stochastic_cpp(arma::mat S, const arma::vec& mu, const arma::vec& nu, double tol, int max_iter);
RcppExport SEXP _manifoldalign_normalize_doubly_stochastic_cpp(SEXP SSEXP, SEXP muSEXP, SEXP nuSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nu(nuSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize_doubly_stochastic_cpp(S, mu, nu, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// compute_squared_distances_cpp
arma::mat compute_squared_distances_cpp(const arma::mat& X1, const arma::mat& X2);
RcppExport SEXP _manifoldalign_compute_squared_distances_cpp(SEXP X1SEXP, SEXP X2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    rcpp_result_gen = Rcpp::wrap(compute_squared_distances_cpp(X1, X2));
    return rcpp_result_gen;
END_RCPP
}
// solve_sylvester_rwr_cpp
arma::mat solve_sylvester_rwr_cpp(const arma::mat& W1, const arma::mat& W2T, const arma::mat& C_node, double beta, double gamma, double tol, int max_iter);
RcppExport SEXP _manifoldalign_solve_sylvester_rwr_cpp(SEXP W1SEXP, SEXP W2TSEXP, SEXP C_nodeSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W2T(W2TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type C_node(C_nodeSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(solve_sylvester_rwr_cpp(W1, W2T, C_node, beta, gamma, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// compute_rwr_vectorized_cpp
arma::mat compute_rwr_vectorized_cpp(const arma::mat& W_transpose, const arma::mat& E, double sigma, int max_iter, double tol);
RcppExport SEXP _manifoldalign_compute_rwr_vectorized_cpp(SEXP W_transposeSEXP, SEXP ESEXP, SEXP sigmaSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type W_transpose(W_transposeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type E(ESEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_rwr_vectorized_cpp(W_transpose, E, sigma, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// compute_parrot_cost_cpp
arma::mat compute_parrot_cost_cpp(const arma::mat& X1, const arma::mat& X2, const arma::mat& R1, const arma::mat& R2, const arma::mat& W1, const arma::mat& W2, double alpha, double sigma, double gamma);
RcppExport SEXP _manifoldalign_compute_parrot_cost_cpp(SEXP X1SEXP, SEXP X2SEXP, SEXP R1SEXP, SEXP R2SEXP, SEXP W1SEXP, SEXP W2SEXP, SEXP alphaSEXP, SEXP sigmaSEXP, SEXP gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X1(X1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X2(X2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R1(R1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type R2(R2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W1(W1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type W2(W2SEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_parrot_cost_cpp(X1, X2, R1, R2, W1, W2, alpha, sigma, gamma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_manifoldalign_linear_sim_embed_cpp", (DL_FUNC) &_manifoldalign_linear_sim_embed_cpp, 8},
    {"_manifoldalign_compute_edge_distances_cpp", (DL_FUNC) &_manifoldalign_compute_edge_distances_cpp, 2},
    {"_manifoldalign_compute_edge_gradient_cpp", (DL_FUNC) &_manifoldalign_compute_edge_gradient_cpp, 5},
    {"_manifoldalign_compute_neighborhood_gradient_cpp", (DL_FUNC) &_manifoldalign_compute_neighborhood_gradient_cpp, 4},
    {"_manifoldalign_compute_anchor_gradient_cpp", (DL_FUNC) &_manifoldalign_compute_anchor_gradient_cpp, 6},
    {"_manifoldalign_log_sum_exp_cols", (DL_FUNC) &_manifoldalign_log_sum_exp_cols, 2},
    {"_manifoldalign_log_sum_exp_rows", (DL_FUNC) &_manifoldalign_log_sum_exp_rows, 2},
    {"_manifoldalign_solve_sinkhorn_stabilized_cpp", (DL_FUNC) &_manifoldalign_solve_sinkhorn_stabilized_cpp, 4},
    {"_manifoldalign_normalize_doubly_stochastic_cpp", (DL_FUNC) &_manifoldalign_normalize_doubly_stochastic_cpp, 5},
    {"_manifoldalign_compute_squared_distances_cpp", (DL_FUNC) &_manifoldalign_compute_squared_distances_cpp, 2},
    {"_manifoldalign_solve_sylvester_rwr_cpp", (DL_FUNC) &_manifoldalign_solve_sylvester_rwr_cpp, 7},
    {"_manifoldalign_compute_rwr_vectorized_cpp", (DL_FUNC) &_manifoldalign_compute_rwr_vectorized_cpp, 5},
    {"_manifoldalign_compute_parrot_cost_cpp", (DL_FUNC) &_manifoldalign_compute_parrot_cost_cpp, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_manifoldalign(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
