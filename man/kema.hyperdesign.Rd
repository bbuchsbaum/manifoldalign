% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kema.R
\name{kema.hyperdesign}
\alias{kema.hyperdesign}
\title{Kernel Manifold Alignment (KEMA) for Hyperdesign Data}
\usage{
\method{kema}{hyperdesign}(
  data,
  y,
  preproc = center(),
  ncomp = 2,
  knn = 5,
  sigma = 0.73,
  u = 0.5,
  kernel = coskern(),
  sample_frac = 1,
  use_laplacian = TRUE,
  solver = "regression",
  dweight = 0,
  rweight = 0,
  simfun = neighborweights::binary_label_matrix,
  disfun = NULL,
  lambda = 1e-04,
  centre_kernel = FALSE,
  ...
)
}
\arguments{
\item{data}{A hyperdesign object containing multiple data domains}

\item{y}{Name of the label variable to use for alignment (can contain NA 
for unlabeled samples)}

\item{preproc}{Preprocessing function to apply to the data (default: 
center())}

\item{ncomp}{Number of components to extract (default: 2)}

\item{knn}{Number of nearest neighbors for graph construction (default: 5)}

\item{sigma}{Kernel bandwidth parameter (default: 0.73)}

\item{u}{Trade-off parameter between data geometry and class alignment 
(0-1, default: 0.5)}

\item{kernel}{Kernel function to use (default: coskern())}

\item{sample_frac}{Fraction of samples to use for kernel approximation 
(default: 1)}

\item{use_laplacian}{Whether to use Laplacian normalization (default: TRUE)}

\item{solver}{Solver method: "regression" for fast approximation (default) 
or "exact" for precise solution}

\item{dweight}{Weight for dissimilarity/repulsion terms (default: 0)}

\item{rweight}{Weight for repulsion graph (default: 0)}

\item{simfun}{Function to compute similarity between labels}

\item{disfun}{Function to compute dissimilarity between labels (optional)}

\item{lambda}{Regularization parameter for matrix conditioning 
(default: 0.0001)}

\item{centre_kernel}{Whether to center kernel matrices (default: FALSE). 
**[EXTENSION]** The original paper uses uncentered kernels. Set TRUE for 
centered variant.}

\item{...}{Additional arguments (currently unused)}
}
\value{
A multiblock_biprojector object containing the KEMA alignment
}
\description{
Performs Kernel Manifold Alignment on hyperdesign data structures. 
Projects data from multiple domains into a shared latent space while 
preserving manifold structure and aligning same-class samples.
}
\details{
This implementation follows the Tuia & Camps-Valls (2016) paper with 
extensions:

**Core KEMA (from paper):**
- Generalized eigenvalue problem: Phi(L+mu*Ls)Phi^T*v = lambda * Phi*Ld*Phi^T*v (Eq. 4)
- Kernelization: K(L+mu*Ls)K*Lambda = lambda * K*Ld*K * Lambda (Eq. 6)  
- Reduced-rank KEMA (REKEMA) for computational efficiency
- Matrix-free eigensolver with Jacobi preconditioning

**Extensions (not in original paper):**
- \code{solver="regression"}: Fast spectral regression approximation 
  (default)
- \code{rweight}: Additional repulsion graph Lr for within-domain 
  separation
- Semi-supervised support: Handles NA labels for unlabeled samples
- Enhanced numerical stability and error handling

The algorithm offers two solver methods:
- "regression": **[EXTENSION]** Fast approximation using spectral 
  regression (default). This method first solves the eigenvalue problem on 
  graph Laplacians, then uses ridge regression to find kernel coefficients. 
  Much faster but may be less accurate for non-linear kernels.
- "exact": Precise solution using the correct generalized eigenvalue 
  formulation from the paper. This method solves the mathematically correct 
  KEMA optimization problem but is more computationally intensive, 
  especially for large datasets.
}
\examples{
\donttest{
# Example with hyperdesign data
library(multidesign)

# Create synthetic multi-domain data
set.seed(123)
domain1 <- list(
  x = matrix(rnorm(100), 50, 2),
  design = data.frame(labels = sample(c("A", "B"), 50, TRUE))
)
domain2 <- list(
  x = matrix(rnorm(100), 50, 2),
  design = data.frame(labels = sample(c("A", "B"), 50, TRUE))
)
hd <- list(domain1 = domain1, domain2 = domain2)

# Run KEMA with default settings
result <- kema(hd, y = labels, ncomp = 2)

# Semi-supervised learning with missing labels
domain1$design$labels[1:10] <- NA  # Mark some samples as unlabeled
result_semi <- kema(hd, y = labels, ncomp = 2)

# Use exact solver for highest accuracy
result_exact <- kema(hd, y = labels, solver = "exact", ncomp = 2)

# Use REKEMA for large datasets
result_rekema <- kema(hd, y = labels, sample_frac = 0.5, ncomp = 2)
}

}
\references{
Tuia, D., & Camps-Valls, G. (2016). Kernel manifold alignment for domain 
adaptation. PLoS ONE, 11(2), e0148655.
}
